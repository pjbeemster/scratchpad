@using DD4T.ContentModel;
@using DD4T.Mvc.Html;
@using System.Linq;
@using Coats.Crafts.Configuration;
@using Coats.Crafts.Extensions;
@using Coats.Crafts.Models;

@model IComponent

@{
    Layout = null;
       
    string thumbLink = string.Empty;
    string thumbUrl = string.Empty;
    var thumbWidth = 0;
    var thumbHeight = 0;
    int counter = 0;
    int outerLoop = 0;

	String microDataType = "http://schema.org/Article";

    if (Model.Fields.ContainsKey("thumb"))
    {
        DD4T.ContentModel.IField thumb = Model.Fields["thumb"];
    }

    string span = ViewBag.PodGenericSpan;
    if (string.IsNullOrEmpty(span)) { span = "span4"; }

    string title = String.Empty;
    string cleanTitle = String.Empty;

    if (Model.Fields.ContainsKey("title"))
    {
        if (Model.Fields["title"].FieldType == FieldType.Xhtml)
        {
            title = Model.Fields["title"].ResolveRichText().ToHtmlString();
        }
        else
        {
            if(Model.Fields["title"].Keywords.Count > 0)
            {
                title = Model.Fields["title"].Keywords[0].Description;
            }
            else
            {    
            title = Model.Fields["title"].Value;
            }
        }

        cleanTitle = Regex.Replace(title, @"<[^>]*>", String.Empty);
    }    

	var summary= Model.Fields.ContainsKey("summary") ? @Model.Fields["summary"].Value.ResolveRichText() : MvcHtmlString.Empty;
	var url = (!String.IsNullOrEmpty(Model.Url)) ? Url.Content(Model.GetResolvedUrl().AddApplicationRoot()) : String.Empty;

	var commentCounter = (Model.Fields.ContainsKey("commentcount") ? Model.Fields["commentcount"].Value : String.Empty);
	bool displayCounter = (!commentCounter.Equals("0") && !string.IsNullOrEmpty(commentCounter) ? true : false);

	//var rating = (Model.Fields.ContainsKey("rating") ? Model.Fields["rating"].Value : String.Empty);

	var imageURL = Model.Fields.ContainsKey("thumb") ? Coats.Crafts.HtmlHelpers.ImageHelper.GetImagePhysicalPath(Model.Fields["thumb"]) : string.Empty;
	var logoUrl = (String.IsNullOrEmpty(imageURL)) ? Coats.Crafts.HtmlHelpers.ImageHelper.GetImagePhysicalPath(WebConfiguration.Current.Logo) : String.Empty;
	
	var pinInterestUrl = string.Empty;

    string pinReturnUrl = string.Empty;
    try
    {
        if (url.ToLower().StartsWith(Request.Url.Scheme))
        {
            pinReturnUrl = url;
        }
        else
        {
            pinReturnUrl = url.StartsWith("~") ? url.Substring(1) : url;
            pinReturnUrl = pinReturnUrl.StartsWith("/") ? pinReturnUrl : "/" + pinReturnUrl;
            pinReturnUrl = string.Format("{0}://{1}{2}", Request.Url.Scheme, Request.Url.Host, pinReturnUrl);
        }
    }
    catch (Exception)
    {
        pinReturnUrl = url;
    }

    
	if (imageURL == string.Empty)
	{
		//pinInterestUrl = String.Format("openPinIterest('//pinterest.com/pin/create/button/?url={0}&media={1}&description={2}')", url, logoUrl, Url.Encode(title));
        pinInterestUrl = String.Format("openPinIterest('//pinterest.com/pin/create/button/?url={0}&media={1}&description={2}')", pinReturnUrl, logoUrl, Url.Encode(title));
    }
	else
	{
        //pinInterestUrl = String.Format("openPinIterest('//pinterest.com/pin/create/button/?url={0}&media={1}&description={2}')", url, imageURL, Url.Encode(title));
        pinInterestUrl = String.Format("openPinIterest('//pinterest.com/pin/create/button/?url={0}&media={1}&description={2}')", pinReturnUrl, imageURL, Url.Encode(title));
    }	
}


<article class="pod @span @Model.DataFilterClasses("techniques")" itemscope itemtype="@microDataType">
           

        @if (Model.Fields.ContainsKey("thumb"))
{
		<div class="image">
			<a href="@url" title="@cleanTitle">@Html.Image(Model.Fields["thumb"])</a>
		</div>
}
 
  
	<div class="content">
		<div class="head">
            @*<span class="type">@(WebConfiguration.Current.ContentTypeArticleTitle)</span>*@
            <span class="type">@Html.GetResource("Articles")</span>
			<h1 itemprop="name"><a href="@url" title="" itemprop="url">@title</a></h1>
			@if (!String.IsNullOrEmpty(@Html.addAuthor(Model).ToString()))
   {
				<span class="author" itemprop="author">@Html.GetResource("By") @Html.addAuthor(Model)</span>
   }
            @Html.Partial("~/Views/Partials/Rating.cshtml", Model)
		</div>
		<div class="body">
           @summary
		</div>
		
        <div class="base">
			<ul class="actions">
				<li>@{Html.RenderPartial("~/Views/Scrapbook/AddScrapbookItemForm.cshtml", Model);}</li>
                    
                @{
                    // This is now just left to fredhopper
                    //if (string.IsNullOrEmpty(commentCounter))
                    //{
                    //    MvcHtmlString commentCount = Html.Action("CommentCount", "Comments", new { compid = Model.Id });

                    //    int UGCcount = 0;

                    //    if (int.TryParse(commentCount.ToString(), out UGCcount))
                    //    {
                    //        if (UGCcount > 0)
                    //        {
                    //            displayCounter = true;
                    //            commentCounter = UGCcount.ToString();
                    //        }
                    //    }
                    //}
					/* Make sure we have at least one comment, if so show the count */
					if (displayCounter)
					{
						<li><a href="@url#comments" class="icon comments">@commentCounter</a></li>
					}
                }
				@*<li><a class="addthis_button_pinterest_share icon pinterest"><!-- --></a></li>*@

				<li><a class="icon pinterest" onclick=@pinInterestUrl></a>
				
				</li>
			</ul>
		</div>
	</div>
</article>

