
@using Coats.Crafts.Configuration;
@using Coats.Crafts.Extensions;

@model Coats.Crafts.Controllers.Registration
           
@{
	Layout = null;
	bool radioSelected = false;
	string selectedRadio = string.Empty;
	int cnt = 0;
    var formAction = "http://" + Request.Url.Host + Request.Url.LocalPath;
	var postcodePlaceholder = Html.GetResource("PostcodePlaceholder");
    
    var signUpTitle = Html.GetResource("SignUpForAccess");
    
    if (!String.IsNullOrEmpty(ViewBag.Title))
    {
        signUpTitle = ViewBag.Title;
    }
    //ViewBag.Stage = "thanksMessage";
}
<section class="register">
	<div class="row-fluid">
	@if (ViewBag.Stage == "register")
	{
		<div class="span1 visible-desktop"></div>
		<div class="span3">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "login", @action = formAction }))
		{
			@Html.ValidationSummary(false, Html.GetResource("RegistrationErrorSummary"));
			<div class="row-fluid">
				<div class="span12">
					<fieldset>
						<h2>@Html.GetResource("SignIn")</h2>
						<div class="row-fluid">
							<div class="span12 control-group">
								@Html.LabelFor(model => model.LoginForm.EmailAddress, new { @class = "required" })
								@Html.TextBoxFor(model => model.LoginForm.EmailAddress, new { maxlength = 255, @placeholder = Html.GetResource("YouEmailExample"), @class = "input-block-level" })
								@Html.ValidationMessageFor(model => model.LoginForm.EmailAddress)
							</div>
						</div>
						<div class="row-fluid">
							<div class="span12 control-group password-block">
								@Html.LabelFor(model => model.LoginForm.Password, new { @class = "required" })
								@Html.PasswordFor(model => model.LoginForm.Password, new { @class = "input-block-level", @placeholder = Html.GetResource("Password") })
								@Html.ValidationMessageFor(model => model.LoginForm.Password)
							</div>
						</div>
						<div class="row-fluid">
							<div class="span12 control-group">
								@Html.HiddenFor(model => model.LoginForm.ReturnUrl)
								<input type="submit" class="btn purple" name="button" value="@Html.GetResource("Login")" id="loginbutton" />
								<p><a href="@Url.Content(WebConfiguration.Current.PasswordReminderPath)" class="additional-link show-forgot-pass" rel="nofollow" target="_top">@Html.GetResource("ForgottenPassword")</a></p>
							</div>
						</div>
					</fieldset>
				</div>
			</div>
			if (!String.IsNullOrEmpty(Html.ValidationMessage("LoginFailed").ToString()))
			{
				<p id="message">@Html.ValidationMessage("LoginFailed")</p>
			}
		}
		@using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "login-form ", @id = "passwordreminderlb", @action = "PasswordReminder/index.html" }))
		{
			@Html.ValidationSummary(false, "Please fix these errors.");
			<div class="row-fluid">
				<div class="span12"> 
					<fieldset>
						<h2>@Html.GetResource("ResetMyPassword")</h2>
						<div class="row-fluid">
							<div class="span12 control-group">
								<label>@Html.GetResource("EmailAddress")</label>
								<input type="text" name="ReminderEmailAddress" placeholder="@Html.GetResource("EmailAddress")" class="input-block-level" />
							</div>
						</div>
						<div class="row-fluid">
							<div class="span12 control-group">
								<input type="submit" class="btn purple" value="@Html.GetResource("ResetMyPasswordBtn")" id="btnResetPassword" />
								<p><a href="#" class="additional-link show-login" rel="nofollow">@Html.GetResource("Login")</a></p>
							</div>
						</div>
					</fieldset>
				</div>
			</div>
		}
		</div>
		<div class="span1 registerdivider visible-desktop">
            <div class="vertline"></div>
        </div>
	 
		<div class="span6">
		@using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "sign-up ", @id = "registration", @action = formAction }))
		{
            Html.ValidationSummary(false, Html.GetResource("RegistrationErrorSummary"));
      
					<div class="row-fluid">
						<div class="span12">
							<fieldset>
								<h2>@signUpTitle</h2>
								<p>@Html.GetResource("SignUpIntro")</p>
                                @if (WebConfiguration.Current.CheckEmailNewsletterOption)
                                {
                                <p><a href="@Url.Content(WebConfiguration.Current.PrivacyPolishPath)" target="_blank">@Html.GetResource("PrivacyPolish")</a></p>
                                }
								<div class="row-fluid">
									<div class="span12 control-group border-top">
										@Html.LabelFor(m => m.RegistrationForm.CustomerDetails.EmailAddress, new { @class = "not_required" })
										@Html.TextBoxFor(m => m.RegistrationForm.CustomerDetails.EmailAddress, new { @maxlength = 255, @placeholder = Html.GetResource("EmailAddress"), @class = "input-block-level" })
										@Html.ValidationMessageFor(m => m.RegistrationForm.CustomerDetails.EmailAddress)
									</div>
								</div>
								<div class="row-fluid">
									<div class="span6 control-group">
										@Html.LabelFor(m => m.RegistrationForm.CustomerDetails.FirstName, new { @class = "not_required" })
										@Html.TextBoxFor(m => m.RegistrationForm.CustomerDetails.FirstName, new { maxlength = 38, @class = "input-block-level", @placeholder = Html.GetResource("FirstName") })
										@Html.ValidationMessageFor(m => m.RegistrationForm.CustomerDetails.FirstName)
										<span class="help-inline">@Html.ValidationMessage("RegistrationErrorFirstName")</span>
									</div>
									<div class="span6 control-group">
										@Html.LabelFor(m => m.RegistrationForm.CustomerDetails.LastName, new { @class = "not_required" })
										@Html.TextBoxFor(m => m.RegistrationForm.CustomerDetails.LastName, new { maxlength = 38, @class = "input-block-level", @placeholder = Html.GetResource("LastName") })
										@Html.ValidationMessageFor(m => m.RegistrationForm.CustomerDetails.LastName)
										<span class="help-inline">@Html.ValidationMessage("RegistrationErrorLastName")</span>
									</div>
								</div>
								<div class="row-fluid">
									<div class="control-group span12">
										@Html.LabelFor(m => m.RegistrationForm.CustomerDetails.DisplayName, new { @class = "not_required" })
										@Html.TextBoxFor(m => m.RegistrationForm.CustomerDetails.DisplayName, new { maxlength = 38, @class = "input-block-level", @placeholder = Html.GetResource("DisplayName")})
										@Html.ValidationMessageFor(m => m.RegistrationForm.CustomerDetails.DisplayName)
										<span class="help-inline">@Html.ValidationMessage("RegistrationErrorDisplayName")</span>
									</div>
								</div>
								<div class="row-fluid">
									<div class="span6 control-group">
										@Html.LabelFor(m => m.RegistrationForm.CustomerDetails.Password, new { @class = "not_required" })
										@Html.PasswordFor(m => m.RegistrationForm.CustomerDetails.Password, new { maxlength = 255, @Value = "", @class = "input-block-level", @placeholder = Html.GetResource("Password")})
										@Html.ValidationMessageFor(m => m.RegistrationForm.CustomerDetails.Password)
										<span class="help-inline">@Html.ValidationMessage("RegistrationErrorPassword")</span>
									</div>
									<div class="span6 control-group">
										@Html.LabelFor(m => m.RegistrationForm.CustomerDetails.VerifyPassword, new { @class = "not_required" })
										@Html.PasswordFor(m => m.RegistrationForm.CustomerDetails.VerifyPassword, new { maxlength = 255, @Value = "", @class = "input-block-level", @placeholder = Html.GetResource("ConfirmPassword") })
										@Html.ValidationMessageFor(m => m.RegistrationForm.CustomerDetails.VerifyPassword)
										<span class="help-inline">@Html.ValidationMessage("RegistrationErrorVerifyPassword")</span>
									</div>
								</div>
								<div class="controls control-group">
									@for (int i = 0; i < Model.RegistrationForm.CraftTypeList.Count; i++)
         {
										@Html.HiddenFor(m => m.RegistrationForm.CraftTypeList[i].Selected)
										@Html.HiddenFor(m => m.RegistrationForm.CraftTypeList[i].Text)
									    @Html.HiddenFor(m => m.RegistrationForm.CraftTypeList[i].Value)
         }
									@for (int i = 0; i < Model.RegistrationForm.EmailNewsletter.Count; i++)
         {
										@Html.HiddenFor(m => m.RegistrationForm.EmailNewsletter[i].Selected)
										@Html.HiddenFor(m => m.RegistrationForm.EmailNewsletter[i].Text)
										@Html.HiddenFor(m => m.RegistrationForm.EmailNewsletter[i].Value)
         }
									@Html.HiddenFor(m => m.RegistrationForm.returnUrl)
									<input type="hidden" name="Stage" value="register" />
									<input type="submit" class="btn purple" value = @Html.GetResource("Register") />
									@Html.ValidationMessage("RegistrationErrorSummary")
                                    
                                    @if (!String.IsNullOrEmpty(Html.ValidationMessage("UnableToCreateNewUser").ToString()))
			                        {
				                        <p id="message">@Html.ValidationMessage("UnableToCreateNewUser")</p>
			                        }
								</div>
							</fieldset>
						</div>
					</div>
        }
		</div>
     
    }
 else if (ViewBag.Stage == "preferences")
 {

     using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "sign-up ", @id = "registration", @action = formAction }))
     {

         Html.ValidationSummary(false, Html.GetResource("RegistrationErrorSummary"));
                <div class="span12">
				    <div class="row-fluid">
						<div class="span1 visible-desktop">
						</div>
						<div class="span10">
							<h2>@Html.GetResource("TaylorYourExperience")</h2>
						</div>
					</div>
			    	<div class="row-fluid">
						<div class="span1 visible-desktop">
						</div>
						<div class="span4">
							<p>@Html.GetResource("YourLocation")</p>
							<div class="postcode controls">
								@Html.LabelFor(m => m.RegistrationForm.AddressDetails.Postcode, new { @class = "not_required" })
								@Html.TextBoxFor(m => m.RegistrationForm.AddressDetails.Postcode, new { maxlength = 255, @class = "span8", @placeholder = postcodePlaceholder, @autocomplete = "off" })
								@Html.ValidationMessageFor(m => m.RegistrationForm.AddressDetails.Postcode)
                                <input id="btnLocate" type="button" class="btn purple" value="@Html.GetResource("Locate")">
								<span class="help-inline">@Html.ValidationMessage("RegistrationErrorPassword")</span>

                                 @{

                                    var lat = Convert.ToDecimal(WebConfiguration.Current.StoreLocatorLatitude).ToString();
                                    var lng = Convert.ToDecimal(WebConfiguration.Current.StoreLocatorLongitude).ToString();
                                }

					            <input type="hidden" id="centerOnLat" value="@lat" />
					            <input type="hidden" id="centerOnLng" value="@lng" />


								<input type="hidden" id="lat" name="lat" />
								<input type="hidden" id="long" name="long" />
								<input type="hidden" id="RegistrationStatus" name="RegistrationStatus" />
								<input type="hidden" id="RegistrationRedirect" name="RegistrationRedirect" />
								<input type="hidden" id="RegistrationInstruction" name="RegistrationInstruction" />
							</div>
							<fieldset class="less-padding">
								<p>@Html.GetResource("MyPreferredCrafts")</p>
								<div class="control-group">
									@Html.CheckBoxList("CraftType", Model.RegistrationForm.CraftTypeList, new HtmlListInfo(HtmlTag.ul, 0, new { @class = "check-horz twocol" }))
								</div>
							</fieldset>
							<fieldset class="less-padding">
								<p>@Html.GetResource("EmailNewsletter")</p>
								<div class="control-group">
									<ul class="check-horz twocol">
									@foreach (var item in Model.RegistrationForm.EmailNewsletter)
         {
             cnt++;
             selectedRadio = "";
             if (item.Selected)
             {
                 selectedRadio = "checked";
                 radioSelected = true;
             }
             if (cnt == Model.RegistrationForm.EmailNewsletter.Count && radioSelected == false)
             {
                 selectedRadio = "checked";
             }
										<li>
											<input type="radio" name="email-newsletter" id="email-newsletter-@item.Text" value="@item.Value" @selectedRadio />
											<label for="email-newsletter-@item.Text">@item.Text</label>
										</li>
         }
									</ul>
								</div>
							</fieldset>
                             @if (WebConfiguration.Current.CheckEmailNewsletterOption)
                                {
                                <p><a href="@Url.Content(WebConfiguration.Current.PrivacyPolishPath)" target="_blank">@Html.GetResource("PrivacyPolish")</a></p>
                                }
						</div>
                       
						<div class="span6">
							<div id="geolocation-canvas">
							</div>
							<div class="controls controls-row control-group pull-right">
								@Html.HiddenFor(m => m.RegistrationForm.returnUrl)
								<input type="hidden" name="Stage" value="preferences" />
								@*<a href="@Model.RegistrationForm.returnUrl" class="btn pink abort" target="_top" rel="nofollow">@Html.GetResource("NoThanks")</a>*@
                                <a href="@Url.Content(WebConfiguration.Current.RegisterWelcome)" class="btn pink abort" target="_top" rel="nofollow">@Html.GetResource("NoThanks")</a>
								<input type="submit" class="btn purple" value= "@Html.GetResource("Setpreferences")"/>
							</div>
						</div>
					</div>
				</div>
     }
 }
@* else if (ViewBag.Stage == "thanksMessage")
 {
     <div> <p>@Html.GetResource("RegistrationWelcomeIntro")</p></div>
 }*@
 else if (ViewBag.Stage == "profile")
 {
     using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "sign-up ", @id = "registration", @action = formAction }))
     {

         Html.ValidationSummary(false, Html.GetResource("RegistrationErrorSummary"));
         
         
     
				<div class="span12">
					<div class="row-fluid">
						<div class="span1 visible-desktop">
						</div>
						<div class="span10">
							<h2>@Html.GetResource("StartToCreateAProfile")</h2>
						</div>
					</div>
    				<div class="row-fluid">
						<div class="span1 visible-desktop">
						</div>
						<div class="span6 registeraboutpanel">
							<div class="controls control-group">
								@Html.LabelFor(m => m.RegistrationForm.CustomerDetails.About, new { @class = "not_required" })
								@Html.TextAreaFor(m => m.RegistrationForm.CustomerDetails.About, new { maxlength = 255, @Value = "" })
								@Html.ValidationMessageFor(m => m.RegistrationForm.CustomerDetails.About)
							</div>
						</div>
                        @*

                        // Disabled profile visible instruction on request of client
                        // maybe implemented at a later date

						<!--<div class="span4">
							<div class="controls control-group">
								<p>@Html.GetResource("ProfileVisibleInstruction")</p>
								<ul class="check-horz">
								@{
         cnt = 0;
         foreach (var item in Model.RegistrationForm.ProfileVisible)
         {
             cnt++;
             selectedRadio = "";
             if (item.Selected)
             {
                 selectedRadio = "checked";
                 radioSelected = true;
             }
             if (cnt == Model.RegistrationForm.EmailNewsletter.Count && radioSelected == false)
             {
                 selectedRadio = "checked";
             }
										<li>
										    <input type="radio" name="visibile-profile" id="visibile-profile-@item.Text" value="@item.Value" @selectedRadio /><label for="visibile-profile-@item.Text">@item.Text</label>
										</li>
         }
								}
								</ul>
							</div>
						</div>*@

					</div>
	    			<div class="row-fluid">
						<div class="span7 visible-desktop">
						</div>
						<div class="span4 text-right">
							<div class="controls controls-row control-group pull-right">
								@{
			
   /*
								 	* 
									* Stash already selected keywords in a hidden input
									* to avoid writing empty/null values as preferences
									* on the third stage submission
									* 
									*/

   if (Model.RegistrationForm.Keywords != null)
   {

       var keywordsString = String.Empty;

       foreach (var keywords in Model.RegistrationForm.Keywords)
       {
           keywordsString += keywords.Key + ",";
       }

										<input type="hidden" name="keyword-stash" value="@keywordsString" />
   }
								}
								<input type="hidden" name="Stage" value="profile" />
								@*<a href="@Model.RegistrationForm.returnUrl" class="btn pink abort" target="_top" rel="nofollow">@Html.GetResource("NoThanks")</a>*@
                                  <a href="@Url.Content(WebConfiguration.Current.RegisterWelcome)" class="btn pink abort" target="_top" rel="nofollow">@Html.GetResource("NoThanks")</a>
								@Html.HiddenFor(m => m.RegistrationForm.returnUrl)
								<input type="submit" class="btn purple" value="@Html.GetResource("Save profile")" />
							</div>
						</div>
					</div>
				</div>
		}
	}
    

	</div>
</section>