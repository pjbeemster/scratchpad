@using DD4T.ContentModel;
@using DD4T.Mvc.Html;
@using Coats.Crafts.Configuration;
@using System.Security.Principal;
@using System.Text;

@*

NOTE // 
The add to scrapbook functionality in this
component view is functionally the same as
what is encapsulated in AddScrapbookItemForm.cshtml,
would be nice to consolidate into one view
or action. Currently AddScrapbookItemForm.cshtml
is expecting an Icomponent and here we are
dealing with Ifields.

*@

@model IComponentPresentation
@{
	Layout = null;
	
	var fields = @Model.Component.Fields;
	var title = fields.ContainsKey("title") ? fields["title"].Value : String.Empty;

	if (String.IsNullOrEmpty(title))
	{
		title = fields.ContainsKey("titleText") ? fields["titleText"].EmbeddedValues[0]["title"].Value : String.Empty;
	}
}
@Html.Partial("~/Views/Partials/CrumbsLight.cshtml")
<section class="moody sidebar-layout" itemscope itemtype="http://schema.org/Article">
	<div class="row-fluid headers">
		<div class="span12">
			<h1 class="logoless">@title</h1>
			<ul class="actions">
				<li>@{Html.RenderPartial("~/Views/Scrapbook/AddScrapbookItemForm.cshtml", Model.Component);}</li>
			</ul>
		</div>
	</div>
   
    @if (fields.ContainsKey("by"))
	{
        @Html.Partial("~/Views/Partials/AuthorRating.cshtml", Model)
	}
    
    @if (fields.ContainsKey("body"))
	{
		var totalfields = fields["body"].Values.Count;
        <div class="row-fluid">
        @for (int i = 0; i < totalfields; i++)
		{
            <div class="span6">
                @fields["body"].Values[i].ResolveRichText()
            </div>
		}
        </div>
	}
    
    @if (fields.ContainsKey("moodboard"))
	{
		Int32 totalpics = fields["moodboard"].EmbeddedValues.Count;

		// check we've got at least one pic before outputting moodboard
		if (totalpics > 0)
		{
		<div class="row-fluid">
        <div class="pods" >
            @for (int i = 0; i < totalpics; i++)
			{
				// Get the current fieldset
				IFieldSet image = fields["moodboard"].EmbeddedValues[i];

				bool allowParse = false;

				// Check we have both a thumbnail and an image at least
				//if (image.ContainsKey("thumb") && image.ContainsKey("image"))
                if (image.ContainsKey("thumb"))
				{
					allowParse = true;
				}
				
				if(allowParse) {

					IField im = image.ContainsKey("image") ? image["image"] : null;
					IField thim = image.ContainsKey("thumb") ? image["thumb"] : null;

                    string thurl = thim != null ? thim.GetImageURL() : string.Empty;
                    
					Int32 thwidth = thim.LinkedComponentValues[0].Multimedia.Width;
					String thtitle = image.ContainsKey("title") ? image["title"].Value : String.Empty;

                    string url = string.Empty;
                    string urlPath = string.Empty;
                    string podHover = string.Empty;
                    
                    if (im != null)
                    {
					    url = im.GetImageURL();
                        urlPath = Url.Content(url);
                        podHover = "podhover";
                    }
                    
					String itemClass = (thwidth > 400) ? "span6" : "span3";
										
					<article class="pod @(itemClass) @podHover"> 
                        
                        @if (!string.IsNullOrEmpty(urlPath))
                            {  
						    <a href="@urlPath">@Html.Image(thim, new { data_img = thurl })</a>
                        } else {
                            @Html.Image(thim, new { data_img = thurl });
                        }
						<ul class="actions">
							<li>
								@if (User.Identity.IsAuthenticated)
        {
            using (Html.BeginForm("AddItem", "Scrapbook", FormMethod.Post, new { @class = "AddExternalItem", rel = "ajax", data_done_event = "inserted-scrapbook" }))
            {
										@Html.ValidationSummary(false)
										<input type="hidden" name="imageUrl" value="@(Url.Content(thurl))" />
										<input type="hidden" name="description" value="@(thtitle)" />
										<input type="hidden" name="sourceUrl" value="@(Request.Url)" />
										<input type="hidden" name="sourceDescription" value="Moodboard" />
										<input type="hidden" name="type" value="Image" />
										<input type="hidden" name="returnUrl" value="@(Request.Url)" />
										<button type="submit" class="icon small scrapbook" title="@Html.GetResource("AddToScrapBook")">@Html.GetResource("AddToScrapBook")</button>
            }
        }
        else
        {
            // Append item details to query string to pass through to login form - login form then adds these as hidden values
            StringBuilder linker = new StringBuilder("~/registration/index.html");
            linker.Append("?action=addtoscrapbook");
            linker.Append("&imageUrl=" + Url.Encode(Url.Content(thurl)));
            linker.Append("&description=" + Url.Encode(thtitle));
            linker.Append("&sourceUrl=" + Url.Encode(Request.Url.ToString()));
            linker.Append("&sourceDescription=" + Url.Encode("Moodboard"));
            linker.Append("&type=" + Url.Encode("Image"));
            linker.Append("&ReturnUrl=" + Url.Encode(Request.Url.AbsolutePath));
									<a href="@Url.Content(linker.ToString())" class="icon scrapbook small" title="@Html.GetResource("AddToScrapBook")" rel="nofollow">@Html.GetResource("AddToScrapBook")</a>
        }
							</li>
                            @if (!string.IsNullOrEmpty(urlPath))
                            { 
							<li><a href="@urlPath" class="icon small zoom-in" title="@Html.GetResource("Zoom")">@Html.GetResource("Zoom")</a></li>
                            }
						</ul>
					</article>
                }
            }
		</div>
		</div>
		}
	}
</section>