@using DD4T.ContentModel;

@model IComponent

@{

/*CD - NOTE THIS TEMPLATE DISPLAYS THE HEADER WEIGHT BUT THE SCHEMA NAME IS WIDTH*/
    Layout = null;
    var fields = @Model.Fields;
    var promo = fields;
    int rows = 0;
    List<string> ats = new List<string>();
    List<string> tickets = new List<string>();
    List<string> desc = new List<string>();
    List<string> ply = new List<string>();
    List<string> length = new List<string>();
    List<string> shades = new List<string>();
    List<string> hooks = new List<string>();
    List<string> widths = new List<string>();

    bool atsEmpty = true;
    bool ticketsEmpty = true;
    bool descEmpty = true;
    bool plyEmpty = true;
    bool lengthEmpty = true;
    bool shadesEmpty = true;
    bool hooksEmpty = true;
    bool widthsEmpty = true;

    if (fields.ContainsKey("article_tickets"))
    {
        rows = fields["article_tickets"].LinkedComponentValues.Count;
        for (int i = 0; i < rows; i++)
        {
            var ccomp = fields["article_tickets"].LinkedComponentValues[i];

            ats.Add(ccomp.Fields.ContainsKey("article_ticket") ? ccomp.Fields["article_ticket"].Value : string.Empty);
            tickets.Add(ccomp.Fields.ContainsKey("ticket") ? ccomp.Fields["ticket"].Value : string.Empty);
            //desc.Add(ccomp.Fields.ContainsKey("description") ? ccomp.Fields["description"].Value : string.Empty);
            desc.Add(ccomp.Fields.ContainsKey("description") ? ccomp.Fields["description"].Keywords[0].Description : string.Empty);
            
            length.Add(ccomp.Fields.ContainsKey("length") ? ccomp.Fields["length"].Value : string.Empty);
            ply.Add(ccomp.Fields.ContainsKey("ply") ? Html.CategoryList(ccomp.Fields["ply"]) : string.Empty);
            hooks.Add(ccomp.Fields.ContainsKey("crochet_hook_sizes") ? Html.CategoryList(ccomp.Fields["crochet_hook_sizes"]) : string.Empty);
            widths.Add(ccomp.Fields.ContainsKey("width") ? ccomp.Fields["width"].Value : string.Empty);
            shades.Add(ccomp.Fields.ContainsKey("shades") ? ccomp.Fields["shades"].GetImageURL() : string.Empty);
        }
        
        if (ats.Exists( x => !String.IsNullOrEmpty(x)))
        {
            atsEmpty = false;
        }
        if (tickets.Exists( x => !String.IsNullOrEmpty(x)))
        {
            ticketsEmpty = false;
        }
        if (desc.Exists(x => !String.IsNullOrEmpty(x)))
        {
            descEmpty = false;
        }
        if (length.Exists(x => !String.IsNullOrEmpty(x)))
        {
            lengthEmpty = false;
        }
        if (widths.Exists( x => !String.IsNullOrEmpty(x)))
        {
            widthsEmpty = false;
        }
        if (ply.Exists( x => !String.IsNullOrEmpty(x)))
        {
            plyEmpty = false;
        }
        if (hooks.Exists(x => !String.IsNullOrEmpty(x)))
        {
            hooksEmpty = false;
        }
        if (shades.Exists(x => !String.IsNullOrEmpty(x)))
        {
            shadesEmpty = false;
        }
        
<div class="row-fluid divider">
	<div class="span12"></div>
</div>
<div class="row-fluid product-info">
	<div class="span12 overflower">
		<table class="table">
			<tr class="header">
            @if (!atsEmpty)
            {
				<th>@Html.GetResource("ArticleTicket")</th>
            }
            @if (!ticketsEmpty)
            {
				<th>@Html.GetResource("ThreadTicket")</th>
            }
            @if (!descEmpty)
            {
				<th>@Html.GetResource("ThreadDescription")</th>
            }
            @if (!lengthEmpty)
            {
				<th>@Html.GetResource("Length")</th>
            }
            @if (!widthsEmpty)
            {
				<th>@Html.GetResource("Weight")</th>
			}
            @if (!plyEmpty)
			{
				<th>@Html.GetResource("Ply")</th>
			}
            @if (!hooksEmpty)
			{
                <th>@Html.GetResource("CrochetHook")</th>
			}
            @if (!shadesEmpty)
			{
				<th>@Html.GetResource("ShadeCard")</th>
			}
			</tr>
  
		@for (int i = 0; i < rows; i++)
  {
	  string tic = "";
	  string des = "";
	  string pl = "";
	  string len = "";
	  string shade = "";
	  string width = "";
	  string hook = "";
	  string at = "";

	  if (ats.Count > i)
	  {
		  at = ats[i].ToString();
	  }
	  if (widths.Count > i)
	  {
		  width = widths[i].ToString();
	  }
	  if (hooks.Count > i)
	  {
		  hook = hooks[i].ToString();
	  }
	  if (tickets.Count > i)
	  {
		  tic = tickets[i].ToString();
	  }
	  if (desc.Count > i)
	  {
		  des = desc[i].ToString();
	  }
	  if (ply.Count > i)
	  {
		  pl = ply[i].ToString();
	  }
	  if (length.Count > i)
	  {
		  len = length[i].ToString();
	  }
	  if (shades.Count > i)
	  {
		  shade = shades[i].ToString();
	  }
      
			<tr>
            @if (!atsEmpty)
			{
				<td><span itemprop="sku">@at</span></td>
			}
            @if (!ticketsEmpty)
			{
				<td>@tic</td>
			}
            @if (!descEmpty)
			{
				<td>@des</td>
			}
            @if (!lengthEmpty)
			{
				<td>@len</td>
			}
            @if (!widthsEmpty)
			{
				<td>@width</td>
			}
            @if (!plyEmpty)
			{
				<td>@pl</td>
			}
            @if (!hooksEmpty)
			{
                <td>@hook</td>
			}
            @if (!shadesEmpty)
			{
				<td>@if (!string.IsNullOrEmpty(shade))
		{ <a href="@shade" target="_blank">@Html.GetResource("Download")</a> }</td>
			}
				
				</tr>
  }
		</table>  
	</div>
</div>
    }
    }