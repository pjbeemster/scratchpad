@using Coats.Crafts.Configuration;
@using Coats.Crafts.CDS;
@model Coats.Crafts.Models.CatsContactForm
@{
    Layout = null;

    List<string> titleList = new List<string>(new string[] { "", "Ms.", "Mrs.", "Mr.", "Miss" });
    List<string> stateList = new List<string>(new string[] { "", "AB", "AK", "AL", "AR", "AZ", "BC", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI",
"IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MB", "MD", "ME", "MI", "MN", "MO",
"MS", "MT", "NB", "NC", "ND", "NE", "NH", "NJ", "NL", "NM", "NS", "NT", "NU", "NV",
"NY", "OH", "OK", "ON", "OR", "PA", "PE", "PQ", "QC", "RI", "SC", "SD", "SK", "TN",
"TX", "UT", "VA", "VI", "VT", "WA", "WE", "WI", "WV", "WY", "YK" });
    List<string> countryList = new List<string>(new string[] { "United States", "Canada" });
    List<string> prodTypeList = new List<string>(new string[] { "", "Fabric", "Sewing Thread", "Zippers", "Yarns", "Crochet Thread", "Hand Embroidery Thread", "Knitting & Crochet Accessories", "Books, Leaflets", "CD Roms", "Wholesale Inquiry", "Other" });
    List<string> questionTypeList = new List<string>(new string[] { "", "Product information", "To let you know a product concern", "To ask a general question of Coats & Clark" });

    var titleItems = new SelectList(titleList);
    var stateItems = new SelectList(stateList);
    var countryItems = new SelectList(countryList);
    var prodTypeItems = new SelectList(prodTypeList);
    var questionTypeItems = new SelectList(questionTypeList);

    var fields = Model.cp.Component.Fields;
        
    var isThankYouPage = false;
    
    if (fields.ContainsKey("alternate"))
    {
        if (fields["alternate"].Values[0] == "thankyoupage")
        {
            isThankYouPage = true;
        }
    }
}
<style>
    .cats-contact h2
    {
        font-size: 20px;
    }
    .cats-contact .form-section
    {
        border-top: 1px solid #E1E1E1;
        margin: 0 auto 20px;
        padding-top: 20px;
    }
    
    .cats-contact form label
    {
        display: block;
        margin-bottom: 10px;
    }
    .cats-contact form .part1 input, .cats-contact form .part2 input, .cats-contact form textarea
    {
        padding-right: 2.5%;
        padding-left: 2.5%;
        width: 95%;
    }
    .cats-contact form input, .cats-contact form textarea, .cats-contact form select
    {
        margin-bottom: 20px;
    }
    .cats-contact form select
    {
        padding: 7px 5px;
        }
    
    .cats-contact form select#Title
    {
        width: 95px;
    }
    .cats-contact form select#State
    {
        width: 110px;
    }
    .cats-contact form .state
    {
        width: 200px;
    }
    .cats-contact form .zip
    {
        width: 200px;
    }
    .cats-contact form .zip input
    {
        width: 200px;
    }
    
    .cats-contact form .part2 select
    {
        width: 100%;
        }
        
    .cats-contact form .part3 input
    {
      @*  margin-left: 20px;*@
        width: 39%;
        }
        
    .cats-contact form .input-validation-error {
        border: 2px solid red !important;
    }
    .cats-contact form .field-validation-valid 
    {
        display:none;
    }
    
    
    .cats-contact form label, .cats-contact form .field-validation-error{display:inline-block}
    .cats-contact form select, .cats-contact form input{display:block;}
    .cats-contact form .part3 input{display:inline-block}
    
</style>
<section class="cats-contact">
    @Html.Partial("~/Views/Partials/HeaderSimple.cshtml", Model.cp)
    <div class="row-fluid">
        @if (fields.ContainsKey("body"))
        {
            <p>@fields["body"].Values[0].ResolveRichText()</p>
        }
    </div>

    @if (!isThankYouPage)
    {
        //using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "cats-form", @action = Request.Url.LocalPath }))
        using (Html.BeginForm("Index", "CATS", FormMethod.Post, new { @class = "cats-form" }))
        {
            if (fields.ContainsKey("subtitle"))
            {
        <div class="row-fluid">
            <h2 class="subtitle">@fields["subtitle"].Values[0]</h2>
        </div>
            }
        <div class="row-fluid form-section part1">
            <div class="span5">
                @Html.ValidationSummary(false, "Please fix these errors.")
                @Html.LabelFor(model => model.Title, "*Title")
                @Html.ValidationMessageFor(model => model.Title, "Title is required")
                @Html.DropDownListFor(model => model.Title, titleItems)
                @Html.LabelFor(model => model.FirstName, "*First Name")
                @Html.ValidationMessageFor(model => model.FirstName, "First Name is required")
                @Html.TextBoxFor(model => model.FirstName, new { maxlength = 20 })
                @Html.LabelFor(model => model.LastName, "*Last Name")
                @Html.ValidationMessageFor(model => model.LastName, "Last Name is required")
                @Html.TextBoxFor(model => model.LastName, new { maxlength = 20 })
                @Html.LabelFor(model => model.EmailAddress, "*Email")
                @Html.ValidationMessageFor(model => model.EmailAddress, "Email Address is required")
                @Html.TextBoxFor(model => model.EmailAddress, new { maxlength = 50 })
                @Html.LabelFor(model => model.TelephoneNumber, "*Phone (###-###-####)")
                @Html.ValidationMessageFor(model => model.TelephoneNumber, "Phone is required")
                @Html.TextBoxFor(model => model.TelephoneNumber, new { maxlength = 12 })
            </div>
            <div class="span5 offset1">
                @Html.LabelFor(model => model.Address1, "*Address")
                @Html.ValidationMessageFor(model => model.Address1, "Address is required")
                @Html.TextBoxFor(model => model.Address1, new { maxlength = 40 })
                @Html.LabelFor(model => model.Address2, "Address")
                @Html.TextBoxFor(model => model.Address2, new { maxlength = 40 })
                @Html.LabelFor(model => model.City, "*City")
                @Html.ValidationMessageFor(model => model.City, "City is required")
                @Html.TextBoxFor(model => model.City, new { maxlength = 40 })
                <div class="row-fluid">
                    <div class="span4">
                        @Html.LabelFor(model => model.State, "*State/Province")
                        @Html.ValidationMessageFor(model => model.State, "Required")
                        @Html.DropDownListFor(model => model.State, stateItems)
                    </div>
                    <div class="span8">
                        @Html.LabelFor(model => model.ZipCode, "*Zip/Postal Code")
                        @Html.ValidationMessageFor(model => model.ZipCode, "Zip/Postal Code is required")
                        @Html.TextBoxFor(model => model.ZipCode, new { maxlength = 6 })
                    </div>
                </div>
                @Html.LabelFor(model => model.Country, "*Country")
                @Html.ValidationMessageFor(model => model.Country, "Country is required")
                @Html.DropDownListFor(model => model.Country, countryItems)
            </div>
        </div>
        <div class="row-fluid form-section part2">
            <div class="span5">
                @Html.LabelFor(model => model.ProductType, "*My comment/question is regarding:")
                @Html.ValidationMessageFor(model => model.ProductType, "Comment/question is required")
                @Html.DropDownListFor(model => model.ProductType, prodTypeItems)
                @Html.LabelFor(model => model.ProductDescription, "If you are contacting us about a specific product, please tell us the name of the product, color, length or size, if applicable:")
                @Html.TextBoxFor(model => model.ProductDescription, new { maxlength = 40 })
                @Html.LabelFor(model => model.QuestionType, "*I need:")
                @Html.ValidationMessageFor(model => model.QuestionType, "This is required")
                @Html.DropDownListFor(model => model.QuestionType, questionTypeItems)
            </div>
            <div class="span5 offset1">
                @Html.LabelFor(model => model.Comments, "*Comments")
                @Html.ValidationMessageFor(model => model.Comments, "Comments are required")
                @Html.TextAreaFor(model => model.Comments)
            </div>
        </div>
        <div class="row-fluid form-section part3">
            <div class="span4 offset8">
                    <input type="reset" onclick="resetFormValidation('.cats-form')" class="btn pink" name="btnReset" id="CancelButton" value="Reset" />
                
                <input type="submit" name="btnSubmit" class="btn purple" id="SubmitButton" value="Submit" />
            </div>
        </div>
        }
    }
</section>

<script type="text/javascript">
    function resetFormValidation(formSelector) { 
        $(formSelector).find("[data-valmsg-replace]")
            .removeClass("field-validation-error")
            .addClass("field-validation-valid")

        $(formSelector).find('.input-validation-error').removeClass('input-validation-error');
    }
</script>
